# TODO: do we need more hosts for MYSQL_HOST ?
# - no, but the question is, should the config directory be a persistent volume? otherwise, if during recreation of the pod
# dbc1-0 is unavailable, then router will not bootstrap properly...
# Storing bootstrap information in persistent volume won't help, as docker container is always bootstrapping on start ðŸ¤¦
# TODO: does router really needs to run on separate nodes than mysql itself?

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-router
  namespace: "${namespace}"
  labels:
    app: mysql-router
spec:
  replicas: ${mysql_config.router_replicas}
  selector:
    matchLabels:
      app: mysql-router
  template:
    metadata:
      labels:
        app: mysql-router
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - mysql
              topologyKey: topology.kubernetes.io/zone
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - mysql-router
                topologyKey: "topology.kubernetes.io/zone"
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - mysql
              topologyKey: "kubernetes.io/hostname"
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                      - mysql-router
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: mysql-router
          # need to explicitly use registry, otherwise randomly ImagePullError occurs
          # Failed to pull image "mysql/mysql-router:8.0.32": rpc error: code = DeadlineExceeded desc = failed to pull and unpack image "docker.io/mysql/mysql-router:8.0.32": failed to resolve reference "docker.io/mysql/mysql-router:8.0.32": failed to do request: Head "https://registry-1.docker.io/v2/mysql/mysql-router/manifests/8.0.32": dial tcp 44.205.64.79:443: i/o timeout
          image: ${registry_path}/mysql/mysql-router:${mysql_config.version}
          env:
            - name: MYSQL_HOST
              value: mysql.${namespace}.svc.cluster.local
            - name: MYSQL_PORT
              value: '3306'
            - name: MYSQL_USER
              value: root
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-secret
                  key: password
            - name: MYSQL_INNODB_CLUSTER_MEMBERS
              value: ${mysql_config.db_replicas}  # TODO: maybe this should be 2? This may result in invalid bootstraping, but it is better than not working at all when one of db instances is down?
          ports:
            - name: mysql-rw
              containerPort: 6446
            - name: mysql-ro
              containerPort: 6447
            - name: mysqlx-rw
              containerPort: 64460
            - name: mysqlx-ro
              containerPort: 64470
          resources:
            limits:
              cpu: "${mysql_config.router_cpu}"
              ephemeral-storage: "1Gi"
              memory: "${mysql_config.router_memory}"
            requests:
              cpu: "${mysql_config.router_cpu}"
              ephemeral-storage: "1Gi"
              memory: "${mysql_config.router_memory}"
          readinessProbe:
            tcpSocket:
              port: 6446
            initialDelaySeconds: 150
            periodSeconds: 30
            timeoutSeconds: 30
            failureThreshold: 60
          livenessProbe:
            tcpSocket:
              port: 6446
            initialDelaySeconds: 150
            periodSeconds: 30
            timeoutSeconds: 30
            failureThreshold: 60
